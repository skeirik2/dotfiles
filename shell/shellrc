# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Uncomment to enable debugging mode
# DEBUG=1

# Setup our environment
export EDITOR=nvim
export XDG_CONFIG_HOME=~/.config
export XDG_CACHE_HOME=~/.cache
export XDG_DATA_HOME=~/.local/share
export LESS="-FRXK"
[ -z "$BASH_VERSION" ] || export EXECIGNORE="$EXECIGNORE:*dll"
[ -z "$ZSH_VERSION"  ] || export fignore=(dll $fignore)

# Setup path
export LOCAL_BUILD_BIN=~/.config/local/build/local/bin
export LOCAL_BIN=~/.local/bin
WINDOWS_BIN=/mnt/c/bin
if [[ $(uname -r)] == ^*Microsoft$ ]]; then
  PATH="$WINDOWS_BIN:$PATH"
elif [[ "$OSTYPE" == "darwin"* ]]; then
  PATH="/usr/local/bin/:$PATH"
fi
export PATH="$LOCAL_BUILD_BIN:$LOCAL_BIN:$PATH"

# handle a stupid bug in wslbridge
[ -z "$ZSH_VERSION" ] || export SHELL="/bin/zsh"

# Setup history for bash/zsh
export HISTFILE="$XDG_CACHE_HOME/shell_history"
export HISTSIZE=10000
export SAVEHIST=10000
export HISTCONTROL=ignoredups
[ -z "$ZSH_VERSION" ] || setopt -h
setopt HIST_IGNORE_DUPS
if [ ! -f "$HISTFILE" ]; then
  echo "Initializing history file..."
  touch "$HISTFILE"
fi

# fix delete key on mac (must be combined with terminal app mapping delete key to same code)
[[ "$OSTYPE" != "darwin"* ]] || [[ -n $TMUX ]] || stty erase '^?'

# startup tmux unless we don't need to
if [ -z $DEBUG ] && [ $TERM != "linux" ] && [ -z $INSIDE_EMACS ] && [ -z $VSCODE_IPC_HOOK_CLI ] && [ -z $TMUX ] && [ -x "$(command -v tmux)" ]; then
  # pretend we are xterm
  export TERM=xterm-256color
  # clear the terminal title
  echo -ne "\033]0;\007"
  # start the session/session group
  if [ -z "$SSH_CLIENT" ]; then
    # here, if we open multiple instances, they are linked to the same window set but with independent current window
    tmux -f ~/.config/tmux/tmux.conf new-session -d -s main; exec tmux -f ~/.config/tmux/tmux.conf new-session -t main \; set-option destroy-unattached
  else
    # here, if we open multiple instances, they all run identically (don't want to accidentally leave sessions open on the server)
    exec tmux -f ~/.config/tmux/tmux.conf new-session -A -s remote
  fi
fi

# color initialization when we aren't in a primitive terminal
if [ -z $DEBUG ] && [ -z $INSIDE_EMACS ] && [ -z $VSCODE_IPC_HOOK_CLI ] && [ $TERM != "linux" ]; then
  # disable software control flow terminal shortcuts ctrl+S/ctrl+Q
  # but allow internal libraries to use this mechanism if they wish
  stty -ixon

  # setup colorscheme from base16 shell
  BASE16_SHELL="$HOME/.config/shell/theme/base16-shell/"
  [[ $- == *i* ]] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        eval "$("$BASE16_SHELL/profile_helper.sh")"

  # set dircolors
  if [ -e "$HOME/.config/dircolors/dircolors" ] ; then
    eval "$(dircolors -b $HOME/.config/dircolors/dircolors)"
  fi

  # shell specific stuff
  if [ $SHELL = "/bin/bash" ]; then
    # setup fancy prompt
    # slow on DrvFS
    source ~/.config/shell/minimalist-git-prompt.sh
    # PS1="\W \\$ "

    # load fzf bindings (only makes sense under readline)
    source ~/.config/shell/fzf/completion.bash
    source ~/.config/shell/fzf/key-bindings.bash
  elif [ $SHELL = "/bin/zsh" ]; then
    # setup shell completions
    zstyle ':completion:*:*:git:*' script ~/.config/shell/bash/git-completion.bash
    fpath=(~/.config/shell/zsh $fpath)
    autoload -U compinit && compinit
    # load powerlevel10k
    PURE_POWER_MODE=portable
    source ~/.config/shell/theme/zsh/powerlevel10k/powerlevel10k.zsh-theme
    source ~/.config/shell/theme/zsh/powerlevel10k-config.zsh
    # force cursor blink
    echo -e -n "\x1b[\x31 q"
    # make completions ignore stuff
    # FIXME: figure out how to make this work...
  fi
else
  PS1="\W \\$ "
  PROMPT="%1~ %(!.#.$) "
fi

# do extra setup on remote sessions
if [ -n "$SSH_CLIENT" ]; then
  # do not ask for passwords via guis
  unset SSH_ASKPASS
  export GIT_ASKPASS=
  # let's be explicit about logging out
  export IGNOREEOF=5
fi

# setup functions/aliases after defining environment
alias wget="wget --hsts-file=\"$XDG_CACHE_HOME/wget-hsts\""
# alias ls='exa ' # let's wait until the bugs are worked out more
if [[ "$OSTYPE" != "darwin"* ]]; then
  alias ls='ls --color=auto'
else
  export CLICOLOR=1
fi
alias sl='ls'
alias vi='nvim '
alias vim='nvim '
alias python='python3 '
alias claer='clear '
alias pypy='pypy3 '
alias diff='git diff --color-moved=blocks --no-index'
alias g='git '
# alias mux="PATH=$SAFEPATH tmuxinator "

# run a command with elevated permissions
function elevate() {
    pushd $(pwd)
    cd /mnt/c/
    powershell.exe -Command "Start-Process cmd -ArgumentList  \"/c\",\"$1 2>&1\" -Verb RunAs"
    popd
}

# open a file
function open() { explorer.exe $1; }

# create new github repo
function ghrepo() { curl -u 'skeirik2' https://api.github.com/user/repos -d '{"name":"$1"}'; }

# find maude modules defined in code in given subdirectory
function mmods() { rg "^\S*^f?mod" * | cut -d' ' -f2; }

# look-up files in a git repo with ext respecting ignore
function fbe() { rg --files -g '*'"$1"; }

# tmux session shortcut from Everett
function ts() {
    command="$1" ; shift
    session="$1"
    case "$command" in
        n|new)    tmux new-session -s "$session" ;;
	a|attach) [ "$session" == "" ] && { echo "Usage: ts attach <session>"; return 1; } || tmux attach -t "$session" ;;
	d|detach) tmux detach;;
	k|kill)   [ "$session" == "" ] && { echo "Usage: ts kill <session>"; return 1; } || tmux kill-session  -t "$session" ;;
        l|ls)     tmux list-sessions ;;
	'')       tmux list-sessions ;;
        *)        echo "Unrecognized 'ts' command: '$command'" >&2
                  return 1 ;;
    esac
}

# setx wrapper for setting environment variables
# function setx() {
# TODO: finish me
# }
